---
swagger: '2.0'
info:
  description: ''
  version: 1.0.0
  title: Api Documentation
host: localhost
basePath: "/"
tags:
  - name: AuthController
  - name: CartController
  - name: CartItemController
  - name: OrderDetailController
  - name: ProductCategoryController
  - name: ProductController
  - name: UserController
schemes:
  - http
  - https
paths:
  "/api/auth/signin":
    post:
      tags:
        - AuthController
      operationId: authenticateUser
      consumes:
        - application/json
      parameters:
        - in: body
          name: loginRequest
          required: false
          schema:
            "$ref": "#/definitions/LoginRequest"
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties: {}
      security:
        - api_key: []
  "/api/cartItems":
    post:
      tags:
        - CartItemController
      operationId: createCartItem
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: cartItem
          required: false
          schema:
            "$ref": "#/definitions/CartItem"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/CartItem"
      security:
        - api_key: []
    patch:
      tags:
        - CartItemController
      operationId: updateCartItem
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: cartItem
          required: false
          schema:
            "$ref": "#/definitions/CartItem"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/CartItem"
      security:
        - api_key: []
  "/api/cartItems/carts/{cartId}":
    get:
      tags:
        - CartItemController
      operationId: getCartItemsByCartId
      parameters:
        - name: cartId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              "$ref": "#/definitions/CartItem"
      security:
        - api_key: []
  "/api/cartItems/{id}":
    get:
      tags:
        - CartItemController
      operationId: getCartItem
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/CartItem"
      security:
        - api_key: []
    delete:
      tags:
        - CartItemController
      operationId: deleteCartItem
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            type: string
            enum:
              - CONTINUE
              - SWITCHING_PROTOCOLS
              - PROCESSING
              - CHECKPOINT
              - OK
              - CREATED
              - ACCEPTED
              - NON_AUTHORITATIVE_INFORMATION
              - NO_CONTENT
              - RESET_CONTENT
              - PARTIAL_CONTENT
              - MULTI_STATUS
              - ALREADY_REPORTED
              - IM_USED
              - MULTIPLE_CHOICES
              - MOVED_PERMANENTLY
              - FOUND
              - MOVED_TEMPORARILY
              - SEE_OTHER
              - NOT_MODIFIED
              - USE_PROXY
              - TEMPORARY_REDIRECT
              - PERMANENT_REDIRECT
              - BAD_REQUEST
              - UNAUTHORIZED
              - PAYMENT_REQUIRED
              - FORBIDDEN
              - NOT_FOUND
              - METHOD_NOT_ALLOWED
              - NOT_ACCEPTABLE
              - PROXY_AUTHENTICATION_REQUIRED
              - REQUEST_TIMEOUT
              - CONFLICT
              - GONE
              - LENGTH_REQUIRED
              - PRECONDITION_FAILED
              - PAYLOAD_TOO_LARGE
              - REQUEST_ENTITY_TOO_LARGE
              - URI_TOO_LONG
              - REQUEST_URI_TOO_LONG
              - UNSUPPORTED_MEDIA_TYPE
              - REQUESTED_RANGE_NOT_SATISFIABLE
              - EXPECTATION_FAILED
              - I_AM_A_TEAPOT
              - INSUFFICIENT_SPACE_ON_RESOURCE
              - METHOD_FAILURE
              - DESTINATION_LOCKED
              - UNPROCESSABLE_ENTITY
              - LOCKED
              - FAILED_DEPENDENCY
              - TOO_EARLY
              - UPGRADE_REQUIRED
              - PRECONDITION_REQUIRED
              - TOO_MANY_REQUESTS
              - REQUEST_HEADER_FIELDS_TOO_LARGE
              - UNAVAILABLE_FOR_LEGAL_REASONS
              - INTERNAL_SERVER_ERROR
              - NOT_IMPLEMENTED
              - BAD_GATEWAY
              - SERVICE_UNAVAILABLE
              - GATEWAY_TIMEOUT
              - HTTP_VERSION_NOT_SUPPORTED
              - VARIANT_ALSO_NEGOTIATES
              - INSUFFICIENT_STORAGE
              - LOOP_DETECTED
              - BANDWIDTH_LIMIT_EXCEEDED
              - NOT_EXTENDED
              - NETWORK_AUTHENTICATION_REQUIRED
      security:
        - api_key: []
  "/api/carts":
    post:
      tags:
        - CartController
      operationId: createCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: cart
          required: false
          schema:
            "$ref": "#/definitions/Cart"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/Cart"
      security:
        - api_key: []
    patch:
      tags:
        - CartController
      operationId: updateCart
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: cart
          required: false
          schema:
            "$ref": "#/definitions/Cart"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/Cart"
      security:
        - api_key: []
  "/api/carts/users/{userId}/{cartStatus}":
    get:
      tags:
        - CartController
      operationId: getCartsByUserAndCartStatus
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
        - name: cartStatus
          in: path
          required: true
          type: string
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              "$ref": "#/definitions/Cart"
      security:
        - api_key: []
  "/api/carts/{id}":
    get:
      tags:
        - CartController
      operationId: getCart
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/Cart"
      security:
        - api_key: []
    delete:
      tags:
        - CartController
      operationId: deleteCart
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            type: string
            enum:
              - CONTINUE
              - SWITCHING_PROTOCOLS
              - PROCESSING
              - CHECKPOINT
              - OK
              - CREATED
              - ACCEPTED
              - NON_AUTHORITATIVE_INFORMATION
              - NO_CONTENT
              - RESET_CONTENT
              - PARTIAL_CONTENT
              - MULTI_STATUS
              - ALREADY_REPORTED
              - IM_USED
              - MULTIPLE_CHOICES
              - MOVED_PERMANENTLY
              - FOUND
              - MOVED_TEMPORARILY
              - SEE_OTHER
              - NOT_MODIFIED
              - USE_PROXY
              - TEMPORARY_REDIRECT
              - PERMANENT_REDIRECT
              - BAD_REQUEST
              - UNAUTHORIZED
              - PAYMENT_REQUIRED
              - FORBIDDEN
              - NOT_FOUND
              - METHOD_NOT_ALLOWED
              - NOT_ACCEPTABLE
              - PROXY_AUTHENTICATION_REQUIRED
              - REQUEST_TIMEOUT
              - CONFLICT
              - GONE
              - LENGTH_REQUIRED
              - PRECONDITION_FAILED
              - PAYLOAD_TOO_LARGE
              - REQUEST_ENTITY_TOO_LARGE
              - URI_TOO_LONG
              - REQUEST_URI_TOO_LONG
              - UNSUPPORTED_MEDIA_TYPE
              - REQUESTED_RANGE_NOT_SATISFIABLE
              - EXPECTATION_FAILED
              - I_AM_A_TEAPOT
              - INSUFFICIENT_SPACE_ON_RESOURCE
              - METHOD_FAILURE
              - DESTINATION_LOCKED
              - UNPROCESSABLE_ENTITY
              - LOCKED
              - FAILED_DEPENDENCY
              - TOO_EARLY
              - UPGRADE_REQUIRED
              - PRECONDITION_REQUIRED
              - TOO_MANY_REQUESTS
              - REQUEST_HEADER_FIELDS_TOO_LARGE
              - UNAVAILABLE_FOR_LEGAL_REASONS
              - INTERNAL_SERVER_ERROR
              - NOT_IMPLEMENTED
              - BAD_GATEWAY
              - SERVICE_UNAVAILABLE
              - GATEWAY_TIMEOUT
              - HTTP_VERSION_NOT_SUPPORTED
              - VARIANT_ALSO_NEGOTIATES
              - INSUFFICIENT_STORAGE
              - LOOP_DETECTED
              - BANDWIDTH_LIMIT_EXCEEDED
              - NOT_EXTENDED
              - NETWORK_AUTHENTICATION_REQUIRED
      security:
        - api_key: []
  "/api/orderDetails":
    post:
      tags:
        - OrderDetailController
      operationId: createOrder
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          required: false
          schema:
            "$ref": "#/definitions/OrderDetail"
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/OrderDetail"
      security:
        - api_key: []
  "/api/productCategories":
    get:
      tags:
        - ProductCategoryController
      operationId: getProductCategories
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              "$ref": "#/definitions/ProductCategory"
      security:
        - api_key: []
  "/api/products":
    get:
      tags:
        - ProductController
      operationId: getProducts
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              "$ref": "#/definitions/Product"
      security:
        - api_key: []
  "/api/products/category/{categoryId}":
    get:
      tags:
        - ProductController
      operationId: getProductsByCategoryId
      parameters:
        - name: categoryId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              "$ref": "#/definitions/Product"
      security:
        - api_key: []
  "/api/products/{id}":
    get:
      tags:
        - ProductController
      operationId: getProduct
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: ''
          schema:
            "$ref": "#/definitions/Product"
      security:
        - api_key: []
  "/api/users":
    post:
      tags:
        - UserController
      operationId: createUser
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: false
          schema:
            "$ref": "#/definitions/User"
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties: {}
      security:
        - api_key: []
securityDefinitions:
  api_key:
    type: apiKey
    name: Authorization
    in: header
definitions:
  OrderDetail:
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      shippingAddress:
        type: string
      cartId:
        type: integer
        format: int64
  Role:
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
        description: ''
        enum:
          - ROLE_USER
          - ROLE_ADMIN
  User:
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
      password:
        type: string
      address:
        type: string
      contactNumber:
        type: integer
        format: int32
      createDate:
        type: string
        format: data-time
        example: '2018-09-10T13:11:43Z'
      roles:
        type: array
        items:
          "$ref": "#/definitions/Role"
  HttpStatus:
    enum:
      - CONTINUE
      - SWITCHING_PROTOCOLS
      - PROCESSING
      - CHECKPOINT
      - OK
      - CREATED
      - ACCEPTED
      - NON_AUTHORITATIVE_INFORMATION
      - NO_CONTENT
      - RESET_CONTENT
      - PARTIAL_CONTENT
      - MULTI_STATUS
      - ALREADY_REPORTED
      - IM_USED
      - MULTIPLE_CHOICES
      - MOVED_PERMANENTLY
      - FOUND
      - MOVED_TEMPORARILY
      - SEE_OTHER
      - NOT_MODIFIED
      - USE_PROXY
      - TEMPORARY_REDIRECT
      - PERMANENT_REDIRECT
      - BAD_REQUEST
      - UNAUTHORIZED
      - PAYMENT_REQUIRED
      - FORBIDDEN
      - NOT_FOUND
      - METHOD_NOT_ALLOWED
      - NOT_ACCEPTABLE
      - PROXY_AUTHENTICATION_REQUIRED
      - REQUEST_TIMEOUT
      - CONFLICT
      - GONE
      - LENGTH_REQUIRED
      - PRECONDITION_FAILED
      - PAYLOAD_TOO_LARGE
      - REQUEST_ENTITY_TOO_LARGE
      - URI_TOO_LONG
      - REQUEST_URI_TOO_LONG
      - UNSUPPORTED_MEDIA_TYPE
      - REQUESTED_RANGE_NOT_SATISFIABLE
      - EXPECTATION_FAILED
      - I_AM_A_TEAPOT
      - INSUFFICIENT_SPACE_ON_RESOURCE
      - METHOD_FAILURE
      - DESTINATION_LOCKED
      - UNPROCESSABLE_ENTITY
      - LOCKED
      - FAILED_DEPENDENCY
      - TOO_EARLY
      - UPGRADE_REQUIRED
      - PRECONDITION_REQUIRED
      - TOO_MANY_REQUESTS
      - REQUEST_HEADER_FIELDS_TOO_LARGE
      - UNAVAILABLE_FOR_LEGAL_REASONS
      - INTERNAL_SERVER_ERROR
      - NOT_IMPLEMENTED
      - BAD_GATEWAY
      - SERVICE_UNAVAILABLE
      - GATEWAY_TIMEOUT
      - HTTP_VERSION_NOT_SUPPORTED
      - VARIANT_ALSO_NEGOTIATES
      - INSUFFICIENT_STORAGE
      - LOOP_DETECTED
      - BANDWIDTH_LIMIT_EXCEEDED
      - NOT_EXTENDED
      - NETWORK_AUTHENTICATION_REQUIRED
  ProductCategory:
    properties:
      id:
        type: integer
        format: int64
      categoryName:
        type: string
      products:
        type: array
        items:
          "$ref": "#/definitions/Product"
  RoleEnum:
    enum:
      - ROLE_USER
      - ROLE_ADMIN
  Product:
    properties:
      id:
        type: integer
        format: int64
      productName:
        type: string
      productDescription:
        type: string
      price:
        type: number
        format: double
      supplierId:
        type: integer
        format: int64
      sku:
        type: string
      stockQuantity:
        type: integer
        format: int32
      productImageUrl:
        type: string
      productCategory:
        "$ref": "#/definitions/ProductCategory"
  CartItem:
    properties:
      id:
        type: integer
        format: int64
      cartId:
        type: integer
        format: int64
      product:
        "$ref": "#/definitions/Product"
      quantity:
        type: integer
        format: int32
  LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
  Cart:
    properties:
      id:
        type: integer
        format: int64
      userId:
        type: integer
        format: int64
      cartStatus:
        type: string
      cartItems:
        type: array
        items:
          "$ref": "#/definitions/CartItem"
